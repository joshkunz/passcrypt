#!/usr/bin/env python

"""
passcrypt - hide in plain sight

    passcrypt is a simple key-value style password
    storage mechanism that keeps password values in
    a encrypted (through various means) file. It was
    written to be used in conjuntion with the {dotfile manager}
    as a simple way of keeping passwords with
    configuration files in a secure way.
"""
import cPickle
from Crypto.Cipher import DES3, AES, Blowfish, blockalgo
from Crypto.Util import Counter
import hashlib
import os
from getpass import getpass

class CryptFile(object):
    """Basic methods for all of the file-types"""

    @classmethod
    def is_file_like(cls, object):
        """Check to see if an object supports
        basic file-like operations"""
        return all((hasattr(object, "read"),
                    hasattr(object, "write"),
                    hasattr(object, "tell"),
                    hasattr(object, "seek"),
                    hasattr(object, "close")))

    def __init__(self, file_name_or_obj):
        if self.is_file_like(file_name_or_obj):
            self._file = file_name_or_obj
        else:
            self._file = open(file_name_or_obj)

class PasswordCryptFile(CryptFile):
    """File operations for 'password' style ciphers"""

    def __init__(self, file_name_or_obj, passphrase):
        """Create a new file writer"""
        super(PasswordCryptFile, self).__init__(file_name_or_obj)
        self._passphrase = hashlib.sha256(passphrase).hexdigest()
        self._crypt = self.new_cipher()

    def get_key_size(self):
        """To be defined by the specific crypt method. Reports
        the maximum key size"""
        raise NotImplementedError()

    def get_cipher(self, key):
        """to be defined by the specific crypt method. Returns
        a new Cipher"""
        raise NotImplementedError()

    def new_cipher(self):
        """internally used for generating a new cipher"""
        return self.get_cipher(self._passphrase[:self.get_key_size()])

    def read(self, size=None):
        """read size, or till the end of the file"""
        if size is None:
            ciphertext = self._file.read()
        else:
            ciphertext = self._file.read(size)
        return self._crypt.decrypt(ciphertext)

    def readline(self):
        """read till the next newline"""
        buffer = ""
        _in = self.read(1)
        while _in and _in != "\n":
            buffer += _in
            _in = self.read(1)
        return buffer

    def is_empty(self):
        """An empty file checker, to avoid needless seeks to the
        end of the file"""
        pos = self._file.tell()
        self.seek(0, 2)
        r = self._file.tell() == 0
        self.seek(pos, 0)
        return r

    def seek(self, to, whence):
        """Warning this is a very inefficient method,
        ciphers are not made to be able to move backwards through files
        (that would really kind of defeat the purpose) so every seek
        requires a re-read of the file up to the seeked-to, position"""
        self._file.seek(to, whence)
        pos = self._file.tell()
        self._file.seek(0, 0)
        self._crypt = self.new_cipher()
        self.read(pos)

    def write(self, plaintext):
        """Write to the file"""
        return self._file.write(self._crypt.encrypt(plaintext))

    def tell(self, *args, **kwargs):
        """report the current position"""
        return self._file.tell(*args, **kwargs)
    
    def close(self):
        """close the file"""
        return self._file.close()

class PKSAEPFile(CryptFile):
    """Read/write PKS-AEP encrypted files, UNUSED"""

    def __init__(self, file_name_or_obj, keyfile=None):
        super(PKSAEPFile, self).__init__(file_name_or_obj)
        if keyfile is not None and self.is_file_like(keyfile):
            self._keyfile = keyfile
        elif keyfile is not None:
            self._keyfile = open(keyfile, 'rb')
        else: self._keyfile = None

class BlowfishFile(PasswordCryptFile):
    """Read/write Blowfish encrypted files"""

    def get_key_size(self):
        return 56

    def get_cipher(self, key):
        # 8 byte counter
        self._counter = Counter.new(64)
        return Blowfish.new(key, 
                            Blowfish.MODE_CTR, 
                            counter=self._counter)


class AESFile(PasswordCryptFile):
    """Read/write AES encrypted files"""

    def get_key_size(self):
        return 32

    def get_cipher(self, key):
        # 16 byte counter
        self._counter = Counter.new(16*8)
        return AES.new(key,
                       AES.MODE_CTR,
                       counter=self._counter)

class DES3File(PasswordCryptFile):
    """Read/write DES3 encrypted files"""

    def get_key_size(self): return 16

    def get_cipher(self, key):
        # * byte counter (8*8 bits)
        self._counter = Counter.new(8*8)
        return DES3.new(key,
                        DES3.MODE_CTR,
                        counter=self._counter)

class EncryptedShelf(object):
    """Shelf-like interface for storing python objects in encrypted
    pickle files."""

    def get_file(self, mode='r'):
        """helper to get the shelf file, with the proper reader"""
        return self._writer(open(self._filename, mode), self._passphrase)

    def __init__(self, writer, filename, passphrase, protocol=0):
        """Create a new EncryptedShelf.

        writer - the file class (blowfish, aes, des) that interfaces
        with the encrypted file.
        filename - name of the shelf file.
        passphrase - password to the archive.
        protocol - pickle protocol to use.
        """

        self._writer = writer
        self._filename = filename
        self._passphrase = passphrase

        if os.path.exists(filename):
            file = self.get_file()
            # unfortunatly, proper unpickling from .load is not
            # working currently
            self._dict = cPickle.loads(file.read())
            file.close()
        else:
            self._dict = {}

        self._protocol = protocol

    def __iter__(self):
        return self.iterkeys()

    def __contains__(self, key):
        return self._dict.__contains__(key)

    def __setitem__(self, key, value):
        self._dict[key] = value

    def __getitem__(self, key):
        return self._dict[key]

    def __delitem__(self, key):
        del self._dict[key]

    def update(self, dict):
        """update with the contents of dictionary 'dict'"""
        self._dict.update(dict)

    def get(self, *args):
        return self._dict.get(*args)

    def keys(self):
        "emulates the dictionary.keys method"
        return self._dict.keys()

    def values(self):
        "emulates the dictionary.values method"
        return self._dict.values()

    def items(self):
        "emulates the dictionary.items method"
        return self._dict.items()

    def iterkeys(self):
        "emulates the dictionary.iterkeys method"
        return self._dict.iterkeys()

    def itervalues(self):
        "emulates the dictionary.itervalues method"
        return self._dict.itervalues()

    def iteritems(self):
        "emulates the dictionary.iteritems method"
        return self._dict.iteritems()

    def sync(self):
        """Write the changes to disk"""
        file = self.get_file(mode='w')
        cPickle.dump(self._dict, file, protocol=self._protocol)
        file.close()

    def close(self):
        """DEPRECATED, alias of sync"""
        self.sync()

if __name__ == "__main__":
    """Main program"""
    import argparse
    import sys

    schemes = {
        "des3": DES3File,
        "blowfish": BlowfishFile,
        "aes": AESFile
    }

    def get_vault(filename, scheme, password):
        return EncryptedShelf(schemes[scheme], filename, password)

    def list_pass(args):
        vault = get_vault(args.output, args.type, args.password)
        for name, pas in vault.iteritems():
            if args.show:
                print "{0}: {1}".format(name, pas)
            else:
                print "{0}".format(name)

    def get_pass(args):
        vault = get_vault(args.output, args.type, args.password)
        if args.name in vault:
            print vault[args.name]
        else:
            sys.exit(1)
        

    def set_pass(args):
        vault = get_vault(args.output, args.type, args.password)
        name_pass = getpass("Enter password for {0}:".format(args.name))
        vault[args.name] = name_pass
        vault.sync()

    def del_pass(args):
        vault = get_vault(args.output, args.type, args.password)
        del vault[args.name]
        vault.sync()

    def getpass_twice(prompt1, prompt2):
        p1 = getpass(prompt1)
        p2 = getpass(prompt2)
        if p1 != p2:
            print "Paswords do not match... aborting."
            sys.exit(1)
        return p1

    def set_vault_pass(args):
        from copy import deepcopy
        vault = get_vault(args.output, args.type, args.password)
        pass_ = getpass_twice("Enter new vault password:",
                              "Re-Enter new vault password:")
        new_vault = get_vault(args.output, args.type, pass_)

        #copy old values to new vault
        new_vault._dict = deepcopy(vault._dict)
        new_vault.sync()
        print "Vault password successfully changed"


    def add_vault(args):
        print "Creating new vault {0}...".format(args.output)
        pass_ = getpass_twice("Enter master password:",
                              "Re-Enter master password:")
        vault = get_vault(args.output, args.type, pass_)
        vault.sync()
        print "Vault created."

    parser = argparse.ArgumentParser()

    parser.add_argument("-o", "--output", "--vault", default="passwd.vault",
                        help="file name of the password vault")
    parser.add_argument("-t", "--type", default="blowfish",
                        choices=schemes.keys(), help="Which encryption \
                        method to use")
    parser.add_argument("-s", "--silent", action="store_true", default=False,
                        help="""Don't prompt for password, only works for:
                        get, set, del and list commands. *Warning* the 'silent'
                        version will echo the password. This option is for use
                        with scripts.""")
    subparsers = parser.add_subparsers()

    get_parser = subparsers.add_parser("get", help="get a password")
    set_parser = subparsers.add_parser("set", help="set a password.")
    del_parser = subparsers.add_parser("del", help="remove a password.")
    list_parser = subparsers.add_parser("list", help="list passwords")
    passwd_parser = subparsers.add_parser("passwd", help="change master password.")
    create_parser = subparsers.add_parser("create", help="create a new password shelf.")

    list_parser.add_argument("-S", "--show", help="Show password values",
                             action="store_true")
    list_parser.set_defaults(method=list_pass)

    get_parser.add_argument("name", help="name of the password to retrive")
    get_parser.set_defaults(method=get_pass)

    set_parser.add_argument("name", help="password id name")
    set_parser.set_defaults(method=set_pass)

    del_parser.add_argument("name", help="password id name")
    del_parser.set_defaults(method=del_pass)


    passwd_parser.set_defaults(method=set_vault_pass)
    
    create_parser.set_defaults(method=add_vault)

    args = parser.parse_args()
    if args.method != add_vault:
        if args.silent:
            args.password = sys.stdin.readline().strip()
        else:
            args.password = getpass("Enter vault password:")
    args.method(args)
